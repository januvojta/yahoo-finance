package cz.januvojt.yahoofinance.model

import cz.januvojt.yahoofinance.dto.CryptoSummaryDTO
import kotlinx.datetime.Instant
import kotlinx.datetime.TimeZone

data class CryptoSummary(
    val averageDailyVolume10Day: Long? = null,
    val averageDailyVolume3Month: Long? = null,
    val circulatingSupply: Long? = null,
    val coinImageUrl: String? = null,
    val currency: String? = null,
    val customPriceAlertConfidence: String? = null,
    val esgPopulated: Boolean? = null,
    val exchange: String? = null,
    val exchangeDataDelayedBy: Long? = null,
    val exchangeTimezoneName: TimeZone? = null,
    val fiftyDayAverage: Double? = null,
    val fiftyDayAverageChange: Double? = null,
    val fiftyDayAverageChangePercent: Double? = null,
    val fiftyTwoWeekHighChange: Double? = null,
    val fiftyTwoWeekHighChangePercent: Double? = null,
    val fiftyTwoWeekLowChange: Double? = null,
    val fiftyTwoWeekLowChangePercent: Double? = null,
    val fiftyTwoWeekRange: Range? = null,
    val firstTradeDate: Instant? = null,
    val fromCurrency: String? = null,
    val fullExchangeName: String? = null,
    val language: String? = null,
    val lastMarket: String? = null,
    val market: String? = null,
    val marketCap: Long? = null,
    val marketState: String? = null,
    val messageBoardId: String? = null,
    val pageViewGrowthWeekly: Double? = null,
    val priceHint: Int? = null,
    val quoteSourceName: String? = null,
    val quoteType: String? = null,
    val region: String? = null,
    val regularMarketChange: Double? = null,
    val regularMarketChangePercent: Double? = null,
    val regularMarketDayRange: Range? = null,
    val regularMarketOpen: Double? = null,
    val regularMarketPreviousClose: Double? = null,
    val regularMarketPrice: Double? = null,
    val regularMarketTime: Instant? = null,
    val regularMarketVolume: Long? = null,
    val shortName: String? = null,
    val sourceInterval: Int? = null,
    val startDate: Instant? = null,
    val symbol: String? = null,
    val toCurrency: String? = null,
    val tradeable: Boolean? = null,
    val triggerable: Boolean? = null,
    val twoHundredDayAverage: Double? = null,
    val twoHundredDayAverageChange: Double? = null,
    val twoHundredDayAverageChangePercent: Double? = null,
    val typeDisp: String? = null,
    val volume24Hr: Long? = null,
    val volumeAllCurrencies: Long? = null,
)

private const val milToSec = 1000

internal fun CryptoSummaryDTO.toCryptoSummary(): CryptoSummary {
    return CryptoSummary(
        this.averageDailyVolume10Day,
        this.averageDailyVolume3Month,
        this.circulatingSupply,
        this.coinImageUrl,
        this.currency,
        this.customPriceAlertConfidence,
        this.esgPopulated,
        this.exchange,
        this.exchangeDataDelayedBy,
        this.exchangeTimezoneName?.let { TimeZone.of(it) },
        this.fiftyDayAverage,
        this.fiftyDayAverageChange,
        this.fiftyDayAverageChangePercent,
        this.fiftyTwoWeekHighChange,
        this.fiftyTwoWeekHighChangePercent,
        this.fiftyTwoWeekLowChange,
        this.fiftyTwoWeekLowChangePercent,
        this.fiftyTwoWeekHigh?.let { this.fiftyTwoWeekLow?.let { it1 -> Range(it, it1) } },
        this.firstTradeDateMilliseconds?.let { Instant.fromEpochMilliseconds(it) },
        this.fromCurrency,
        this.fullExchangeName,
        this.language,
        this.lastMarket,
        this.market,
        this.marketCap,
        this.marketState,
        this.messageBoardId,
        this.pageViewGrowthWeekly,
        this.priceHint,
        this.quoteSourceName,
        this.quoteType,
        this.region,
        this.regularMarketChange,
        this.regularMarketChangePercent,
        this.regularMarketDayHigh?.let { this.regularMarketDayLow?.let { it1 -> Range(it, it1) } },
        this.regularMarketOpen,
        this.regularMarketPreviousClose,
        this.regularMarketPrice,
        this.regularMarketTime?.let { Instant.fromEpochSeconds(it, milToSec) },
        this.regularMarketVolume,
        this.shortName,
        this.sourceInterval,
        this.startDate?.let { Instant.fromEpochSeconds(it, milToSec) },
        this.symbol,
        this.toCurrency,
        this.tradeable,
        this.triggerable,
        this.twoHundredDayAverage,
        this.twoHundredDayAverageChange,
        this.twoHundredDayAverageChangePercent,
        this.typeDisp,
        this.volume24Hr,
        this.volumeAllCurrencies,
    )
}